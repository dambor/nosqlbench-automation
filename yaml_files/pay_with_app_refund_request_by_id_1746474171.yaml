scenarios:
  default:
    schema1: run driver=cql tags=block:"schema.*" threads===UNDEF cycles==UNDEF
    rampup1: run driver=cql tags='block:rampup1' cycles===TEMPLATE(rampup-cycles,10000000)
      threads=auto
bindings:
  transactionreferenceid: AlphaNumericString(10)
  insertedtimestamp: AddHashRange(0,2419200000L); StartingEpochMillis('2025-01-01
    05:00:00'); ToJavaInstant()
  amount: Add(1.0); ToBigDecimal()
  lanenumber: AlphaNumericString(10)
  salestaxamount: Add(1.0); ToBigDecimal()
  storenumber: AlphaNumericString(10)
  transactiondate: AddHashRange(0,2419200000L); StartingEpochMillis('2025-01-01 05:00:00');
    ToJavaInstant()
blocks:
  schema1:
    params:
      prepared: false
    ops:
      create_table1: 'CREATE TABLE if not exists <<keyspace:centralpayment>>.pay_with_app_refund_request_by_id
        (

        transactionreferenceid text,

        insertedtimestamp timestamp,

        amount decimal,

        lanenumber text,

        salestaxamount decimal,

        storenumber text,

        transactiondate timestamp,

        PRIMARY KEY (transactionreferenceid,insertedtimestamp)

        ) WITH CLUSTERING ORDER BY (insertedtimestamp DESC);'
  rampup1:
    params:
      cl: TEMPLATE(write_cl,LOCAL_QUORUM)
      instrument: true
      prepared: true
    ops:
      insert_rampup1: "insert into <<keyspace:centralpayment>>.pay_with_app_refund_request_by_id\
        \ (\ntransactionreferenceid,\ninsertedtimestamp,\namount,\nlanenumber,\nsalestaxamount,\n\
        storenumber,\ntransactiondate\n) values \n(\n{transactionreferenceid},\n{insertedtimestamp},\n\
        {amount},\n{lanenumber},\n{salestaxamount},\n{storenumber},\n{transactiondate}\n\
        );"
